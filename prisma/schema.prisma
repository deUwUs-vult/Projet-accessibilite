datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  Session       Session[]
  Account       Account?
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  userSurveys   UserSurveys[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Template {
  id   String @id @default(cuid())
  name String

  surveys         Survey?
  templatesColors TemplatesColors?
}

model TemplatesColors {
  id               String   @id @default(cuid())
  templateId       String   @unique
  font             String
  background       String
  secondBackground String
  links            String
  placeholders     String
  template         Template @relation(fields: [templateId], references: [id])
}

model Survey {
  id              String            @id @default(cuid())
  name            String
  description     String
  templateId      String            @unique
  template        Template          @relation(fields: [templateId], references: [id])
  surveyQuestions SurveyQuestions[]
  userSurveys     UserSurveys[]
}

model SurveyQuestions {
  id       String          @id @default(cuid())
  surveyId String
  type     String
  question String
  answers  SurveyAnswers[]
  survey   Survey          @relation(fields: [surveyId], references: [id])
}

model SurveyAnswers {
  id               String          @id @default(cuid())
  surveyQuestionId String
  isCorrect        Boolean
  answer           String
  surveyQuestion   SurveyQuestions @relation(fields: [surveyQuestionId], references: [id])
}

model UserSurveys {
  id       String @id @default(cuid())
  userId   String
  surveyId String
  user     User   @relation(fields: [userId], references: [id])
  survey   Survey @relation(fields: [surveyId], references: [id])
}
